// Code generated by counterfeiter. DO NOT EDIT.
package component

import (
	"context"
	"sync"

	"github.com/tmavrin/igp-code-challenge/internal/component/email"
	"github.com/tmavrin/igp-code-challenge/internal/types"
)

type EmailProvider struct {
	SendWelcomeEmailStub        func(context.Context, types.Account) error
	sendWelcomeEmailMutex       sync.RWMutex
	sendWelcomeEmailArgsForCall []struct {
		arg1 context.Context
		arg2 types.Account
	}
	sendWelcomeEmailReturns struct {
		result1 error
	}
	sendWelcomeEmailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EmailProvider) SendWelcomeEmail(arg1 context.Context, arg2 types.Account) error {
	fake.sendWelcomeEmailMutex.Lock()
	ret, specificReturn := fake.sendWelcomeEmailReturnsOnCall[len(fake.sendWelcomeEmailArgsForCall)]
	fake.sendWelcomeEmailArgsForCall = append(fake.sendWelcomeEmailArgsForCall, struct {
		arg1 context.Context
		arg2 types.Account
	}{arg1, arg2})
	stub := fake.SendWelcomeEmailStub
	fakeReturns := fake.sendWelcomeEmailReturns
	fake.recordInvocation("SendWelcomeEmail", []interface{}{arg1, arg2})
	fake.sendWelcomeEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *EmailProvider) SendWelcomeEmailCallCount() int {
	fake.sendWelcomeEmailMutex.RLock()
	defer fake.sendWelcomeEmailMutex.RUnlock()
	return len(fake.sendWelcomeEmailArgsForCall)
}

func (fake *EmailProvider) SendWelcomeEmailCalls(stub func(context.Context, types.Account) error) {
	fake.sendWelcomeEmailMutex.Lock()
	defer fake.sendWelcomeEmailMutex.Unlock()
	fake.SendWelcomeEmailStub = stub
}

func (fake *EmailProvider) SendWelcomeEmailArgsForCall(i int) (context.Context, types.Account) {
	fake.sendWelcomeEmailMutex.RLock()
	defer fake.sendWelcomeEmailMutex.RUnlock()
	argsForCall := fake.sendWelcomeEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EmailProvider) SendWelcomeEmailReturns(result1 error) {
	fake.sendWelcomeEmailMutex.Lock()
	defer fake.sendWelcomeEmailMutex.Unlock()
	fake.SendWelcomeEmailStub = nil
	fake.sendWelcomeEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *EmailProvider) SendWelcomeEmailReturnsOnCall(i int, result1 error) {
	fake.sendWelcomeEmailMutex.Lock()
	defer fake.sendWelcomeEmailMutex.Unlock()
	fake.SendWelcomeEmailStub = nil
	if fake.sendWelcomeEmailReturnsOnCall == nil {
		fake.sendWelcomeEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendWelcomeEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EmailProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendWelcomeEmailMutex.RLock()
	defer fake.sendWelcomeEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EmailProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ email.Provider = new(EmailProvider)
