// Code generated by counterfeiter. DO NOT EDIT.
package component

import (
	"context"
	"sync"

	"github.com/tmavrin/igp-code-challenge/internal/component/auth"
	"github.com/tmavrin/igp-code-challenge/internal/types"
)

type AuthProvider struct {
	AuthStub        func(context.Context, string) (types.Account, error)
	authMutex       sync.RWMutex
	authArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	authReturns struct {
		result1 types.Account
		result2 error
	}
	authReturnsOnCall map[int]struct {
		result1 types.Account
		result2 error
	}
	CreateStub        func(context.Context, types.AuthCredentials) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 types.AuthCredentials
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	LoginStub        func(context.Context, types.AuthCredentials) (types.Account, string, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 types.AuthCredentials
	}
	loginReturns struct {
		result1 types.Account
		result2 string
		result3 error
	}
	loginReturnsOnCall map[int]struct {
		result1 types.Account
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthProvider) Auth(arg1 context.Context, arg2 string) (types.Account, error) {
	fake.authMutex.Lock()
	ret, specificReturn := fake.authReturnsOnCall[len(fake.authArgsForCall)]
	fake.authArgsForCall = append(fake.authArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.AuthStub
	fakeReturns := fake.authReturns
	fake.recordInvocation("Auth", []interface{}{arg1, arg2})
	fake.authMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthProvider) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *AuthProvider) AuthCalls(stub func(context.Context, string) (types.Account, error)) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = stub
}

func (fake *AuthProvider) AuthArgsForCall(i int) (context.Context, string) {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	argsForCall := fake.authArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthProvider) AuthReturns(result1 types.Account, result2 error) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 types.Account
		result2 error
	}{result1, result2}
}

func (fake *AuthProvider) AuthReturnsOnCall(i int, result1 types.Account, result2 error) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	if fake.authReturnsOnCall == nil {
		fake.authReturnsOnCall = make(map[int]struct {
			result1 types.Account
			result2 error
		})
	}
	fake.authReturnsOnCall[i] = struct {
		result1 types.Account
		result2 error
	}{result1, result2}
}

func (fake *AuthProvider) Create(arg1 context.Context, arg2 types.AuthCredentials) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 types.AuthCredentials
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AuthProvider) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *AuthProvider) CreateCalls(stub func(context.Context, types.AuthCredentials) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *AuthProvider) CreateArgsForCall(i int) (context.Context, types.AuthCredentials) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthProvider) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *AuthProvider) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AuthProvider) Login(arg1 context.Context, arg2 types.AuthCredentials) (types.Account, string, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 types.AuthCredentials
	}{arg1, arg2})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *AuthProvider) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *AuthProvider) LoginCalls(stub func(context.Context, types.AuthCredentials) (types.Account, string, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *AuthProvider) LoginArgsForCall(i int) (context.Context, types.AuthCredentials) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AuthProvider) LoginReturns(result1 types.Account, result2 string, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 types.Account
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *AuthProvider) LoginReturnsOnCall(i int, result1 types.Account, result2 string, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 types.Account
			result2 string
			result3 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 types.Account
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *AuthProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Provider = new(AuthProvider)
